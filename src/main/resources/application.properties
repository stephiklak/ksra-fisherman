spring.application.name=fisherman
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
#spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


# Ensure Spring runs data.sql after Hibernate creates schema
spring.sql.init.mode=never
spring.jpa.defer-datasource-initialization=true


#spring.security.user.name=admin
#spring.security.user.password=admin123


server.port=8443
server.ssl.enabled=true
server.ssl.key-store=keystore.p12
server.ssl.key-store-type=PKCS12
server.ssl.key-store-password=changeit

# ===============================
# AWS Cognito Configuration
# ===============================
aws.cognito.region=us-east-2
aws.cognito.userPoolId=us-east-2_vafrricx7
aws.cognito.clientId=7luss1jt3rqv467pqlrobur2o8
aws.cognito.domain=https://us-east-2vafrricx7.auth.us-east-2.amazoncognito.com
aws.cognito.redirectUri=https://98.81.162.163:8443/api/users1

# Spring Security (OAuth2)
spring.security.oauth2.client.registration.cognito.client-id=${aws.cognito.clientId}
spring.security.oauth2.client.registration.cognito.client-name=AWS Cognito
spring.security.oauth2.client.registration.cognito.scope=openid, email, profile
spring.security.oauth2.client.registration.cognito.redirect-uri=${aws.cognito.redirectUri}
spring.security.oauth2.client.provider.cognito.issuer-uri=${aws.cognito.domain}/oauth2